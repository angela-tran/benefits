name: Deploy to Amazon ECS (dev)

on:
  workflow_dispatch:
  push:
    branches:
      - dev
    paths:
      - '.aws/**'
      - '.github/workflows/ecs-deploy-*.yml'
      - 'benefits/**'
      - 'bin/**'
      - Dockerfile
      - gunicorn.conf.py
      - nginx.conf
      - requirements.txt

defaults:
  run:
    shell: bash

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: dev
    concurrency: dev

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-client-image
        env:
          ECR_REPOSITORY: cal-itp-benefits-client
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Define path to configuration image
        id: define-config-image
        env:
          ECR_REPOSITORY: aws-cli
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ secrets.AWS_CLI_TAG }}
        run: |
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Add environment-specific config to ECS task
        id: task-env
        env:
          AWS_ACCOUNT: ${{ secrets.AWS_ACCOUNT }}
          AWS_BUCKET: ${{ secrets.AWS_BUCKET }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          sed -i "s/<aws_account>/$AWS_ACCOUNT/g" .aws/ecs-task.json
          sed -i "s/<aws_bucket>/$AWS_BUCKET/g" .aws/ecs-task.json
          sed -i "s/<aws_region>/$AWS_REGION/g" .aws/ecs-task.json

      - name: Fill in client image ID in ECS task
        id: client-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: .aws/ecs-task.json
          container-name: cal-itp-benefits-client
          image: ${{ steps.build-client-image.outputs.image }}

      - name: Fill in config image ID in ECS task
        id: config-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.client-task-def.outputs.task-definition }}
          container-name: cal-itp-benefits-client-config
          image: ${{ steps.define-config-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.config-task-def.outputs.task-definition }}
          service: cal-itp-benefits-client
          cluster: cal-itp-clientCluster
          wait-for-service-stability: true
